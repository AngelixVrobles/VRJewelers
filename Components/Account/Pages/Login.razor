@page "/Account/Login"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using VRJewelers.Data

@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Iniciar Sesión</PageTitle>

<div class="login-container d-flex justify-content-center align-items-center py-5">
    <div class="card shadow-lg p-4 login-card">
        <h2 class="text-center mb-4 fw-bold text-primary">Iniciar Sesión</h2>

        <StatusMessage Message="@errorMessage" />

        <EditForm Model="Input" OnValidSubmit="LoginUser" FormName="login" class="needs-validation" novalidate>
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger mb-3" />

            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.Email" id="Input.Email" class="form-control" autocomplete="username" placeholder="Correo electrónico" />
                <label for="Input.Email">Correo electrónico</label>
                <ValidationMessage For="() => Input.Email" class="text-danger" />
            </div>

            <div class="form-floating mb-3">
                <InputText type="password" @bind-Value="Input.Password" id="Input.Password" class="form-control" autocomplete="current-password" placeholder="Contraseña" />
                <label for="Input.Password">Contraseña</label>
                <ValidationMessage For="() => Input.Password" class="text-danger" />
            </div>

            <div class="form-check mb-4">
                <InputCheckbox @bind-Value="Input.RememberMe" id="rememberMe" class="form-check-input" />
                <label class="form-check-label" for="rememberMe">Recordarme</label>
            </div>

            <button type="submit" class="btn btn-primary w-100 py-2 fw-semibold fs-5">Entrar</button>
        </EditForm>

        <div class="mt-4 text-center small">
            <p><a href="Account/ForgotPassword" class="text-decoration-none">¿Olvidaste tu contraseña?</a></p>
            <p>
                ¿No tienes cuenta?
                <a href="@(NavigationManager.GetUriWithQueryParameters("Account/Register", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))" class="text-decoration-none fw-semibold text-primary">
                    Regístrate aquí
                </a>
            </p>
            <p><a href="Account/ResendEmailConfirmation" class="text-decoration-none">Reenviar confirmación de email</a></p>
        </div>
    </div>

  
</div>

<style>
    .login-container {
        min-height: 80vh;
        max-width: 900px;
        margin: 0 auto;
    }

    .login-card {
        width: 100%;
        max-width: 400px;
        border-radius: 1rem;
        background: #ffffff;
    }

    .external-login {
        max-width: 300px;
    }

    .btn-primary {
        background: #5a2d82;
        border-color: #5a2d82;
        transition: background 0.3s ease;
    }

        .btn-primary:hover {
            background: #431d5c;
            border-color: #431d5c;
        }

    .form-floating > label {
        color: #6c757d;
    }
</style>

@code {
    private string? errorMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {
        var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);
        if (result.Succeeded)
        {
            Logger.LogInformation("User logged in.");
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else if (result.RequiresTwoFactor)
        {
            RedirectManager.RedirectTo(
                "Account/LoginWith2fa",
                new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User account locked out.");
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            errorMessage = "Error: Intento de inicio de sesión inválido.";
        }
    }

    private sealed class InputModel
    {
        [Required(ErrorMessage = "El email es obligatorio")]
        [EmailAddress(ErrorMessage = "Formato de email inválido")]
        public string Email { get; set; } = "";

        [Required(ErrorMessage = "La contraseña es obligatoria")]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Recordarme")]
        public bool RememberMe { get; set; }
    }
}

@page "/"
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Identity.EntityFrameworkCore
@using Microsoft.Extensions.Logging
@using VRJewelers.Data
@using VrJewelers.Models

@inject UserManager<ApplicationUser> UserManager
@inject IUserStore<ApplicationUser> UserStore
@inject RoleManager<IdentityRole> RoleManager
@inject ILogger<Home> Logger

@inject VRJewelers.Services.ProductosService productoService
@inject AdminsService adminsService
@inject CarritoService carritoService
@inject NavigationManager navigationManager

<PageTitle>VRJewelry - Inicio</PageTitle>

<section class="hero-section d-flex align-items-center text-center text-white">
    <div class="container">
        <h1 class="display-2 fw-bold">
            VRJewelry
        </h1>
        <p class="lead mb-4">Diseños exclusivos para quienes buscan elegancia y estilo.</p>
        <a href="#productos" class="btn btn-light btn-lg px-5 rounded-pill shadow-sm">
            Comprar ahora
        </a>
    </div>
</section>

<div class="container py-5" id="productos">
    <h2 class="text-center fw-bold mb-5">Novedades</h2>

    @if (Productos == null)
    {
        <div class="d-flex justify-content-center my-5">
            <div class="spinner-border text-dark" role="status">
                <span class="visually-hidden">Cargando productos...</span>
            </div>
        </div>
    }
    else if (!Productos.Any())
    {
        <p class="text-center text-muted fs-5">¡Lo sentimos! No hay productos disponibles en este momento...</p>
    }
    else
    {
        <div class="row g-4">
            @foreach (var producto in Productos)
            {
                <div class="col-12 col-sm-6 col-lg-4">
                    <div class="card border-0 shadow-sm h-100 product-card">
                        <div class="ratio ratio-1x1">
                            <img @onclick="() => VerProducto(producto.ProductoId)" src="@producto.ImagenUrl" class="card-img-top object-fit-cover" alt="@producto.NombreProducto" />
                        </div>
                        <div class="card-body text-center">
                            <h5 class="fw-bold">@producto.NombreProducto</h5>
                            <p class="text-muted small">@producto.Descripcion</p>
                            <div class="mt-3">
                                <span class="fw-bold fs-5 text-dark">@producto.Precio.ToString("C")</span>
                            </div>
                            <EditForm Model="producto" FormName="@producto.NombreProducto" OnValidSubmit="() => AgregarAlCarritoAsync(producto.ProductoId, producto.Precio)">
                                <button type="submit"
                                class="btn btn-dark btn-sm mt-3 px-4 rounded-pill">
                                    + <i class="bi bi-cart4"></i>
                                </button>
                            </EditForm>
                        </div>
                    </div>
                </div>
            }
        </div>
    }
</div>

<!-- Footer -->
<footer class="bg-dark text-light py-4 mt-5">
    <div class="container text-center">
        <small>&copy; 2025 VRJewelers · Todos los derechos reservados</small>
    </div>
</footer>

<style>
    .hero-section {
    background: url('https://images.unsplash.com/photo-1523275335684-37898b6baf30') center/cover no-repeat;
    height: 80vh;
    }

    .product-card {
    transition: transform 0.25s ease-in-out;
    }

    .product-card:hover {
    transform: translateY(-5px);
    }

    .object-fit-cover {
    object-fit: cover;
    }
</style>

@code {
    private List<Productos> Productos { get; set; } = new();
    public List<Admins> ListaAdmin { get; set; } = new();
    private IEnumerable<IdentityError>? identityErrors;

    protected override async Task OnInitializedAsync()
    {
        Productos = await productoService.Listar(x => true);

        if ((ListaAdmin = await adminsService.Listar(x => true)).Count == 0)
        {
            var userAdmin = CreateUser();

            await UserStore.SetUserNameAsync(userAdmin, "Admin", CancellationToken.None);
            var emailStore = GetEmailStore();
            await emailStore.SetEmailAsync(userAdmin, "Admin@gmail.com", CancellationToken.None);
            await UserManager.SetPhoneNumberAsync(userAdmin, string.Empty);
            userAdmin.PasswordHash = "Contraseña123@";
            userAdmin.EmailConfirmed = true;
            var result = await UserStore.CreateAsync(userAdmin, CancellationToken.None);

            if (!result.Succeeded)
            {
                identityErrors = result.Errors;
                await UserManager.DeleteAsync(userAdmin);
                return;
            }

            var rol = "admin";
            if (!await RoleManager.RoleExistsAsync(rol))
                await RoleManager.CreateAsync(new IdentityRole(rol));

            await UserManager.AddToRoleAsync(userAdmin, rol);

            if (!result.Succeeded)
            {
                await UserManager.DeleteAsync(userAdmin);
                return;
            }

            Logger.LogInformation("El usuario con rol de admin se ha creado exitosamente.");

            Admins admin = new();
            admin.ApplicationUserId = userAdmin.Id;
            admin.Nombre = userAdmin.UserName;
            admin.FechaIngreso = DateTime.Now;

            if (!await adminsService.Guardar(admin))
                await UserManager.DeleteAsync(userAdmin);
        }
    }

    public async Task AgregarAlCarritoAsync(int productoId, float precio)
    {
        await carritoService.AgregarAlCarritoAsync(productoId, precio);
        StateHasChanged();
    }

    public void VerProducto(int productoId)
    {
        navigationManager.NavigateTo($"/Productos/View/{productoId}");
    }

    private ApplicationUser CreateUser()
    {
        try
        {
            return Activator.CreateInstance<ApplicationUser>();
        }
        catch
        {
            throw new InvalidOperationException($"Can't create an instance of '{nameof(ApplicationUser)}'. " +
                $"Ensure that '{nameof(ApplicationUser)}' is not an abstract class and has a parameterless constructor.");
        }
    }

    private IUserEmailStore<ApplicationUser> GetEmailStore()
    {
        if (!UserManager.SupportsUserEmail)
        {
            throw new NotSupportedException("The default UI requires a user store with email support.");
        }
        return (IUserEmailStore<ApplicationUser>)UserStore;
    }
}
